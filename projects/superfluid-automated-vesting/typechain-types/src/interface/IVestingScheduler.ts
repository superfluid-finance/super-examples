/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils
} from "ethers"
import type {
    FunctionFragment,
    Result,
    EventFragment
} from "@ethersproject/abi"
import type { Listener, Provider } from "@ethersproject/providers"
import type {
    TypedEventFilter,
    TypedEvent,
    TypedListener,
    OnEvent,
    PromiseOrValue
} from "../../common"

export declare namespace IVestingScheduler {
    export type VestingScheduleStruct = {
        cliffAndFlowDate: PromiseOrValue<BigNumberish>
        endDate: PromiseOrValue<BigNumberish>
        flowRate: PromiseOrValue<BigNumberish>
        cliffAmount: PromiseOrValue<BigNumberish>
    }

    export type VestingScheduleStructOutput = [
        number,
        number,
        BigNumber,
        BigNumber
    ] & {
        cliffAndFlowDate: number
        endDate: number
        flowRate: BigNumber
        cliffAmount: BigNumber
    }
}

export interface IVestingSchedulerInterface extends utils.Interface {
    functions: {
        "createVestingSchedule(address,address,uint32,uint32,int96,uint256,uint32,bytes)": FunctionFragment
        "deleteVestingSchedule(address,address,bytes)": FunctionFragment
        "executeCliffAndFlow(address,address,address)": FunctionFragment
        "executeEndVesting(address,address,address)": FunctionFragment
        "getVestingSchedule(address,address,address)": FunctionFragment
        "updateVestingSchedule(address,address,uint32,bytes)": FunctionFragment
    }

    getFunction(
        nameOrSignatureOrTopic:
            | "createVestingSchedule"
            | "deleteVestingSchedule"
            | "executeCliffAndFlow"
            | "executeEndVesting"
            | "getVestingSchedule"
            | "updateVestingSchedule"
    ): FunctionFragment

    encodeFunctionData(
        functionFragment: "createVestingSchedule",
        values: [
            PromiseOrValue<string>,
            PromiseOrValue<string>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BytesLike>
        ]
    ): string
    encodeFunctionData(
        functionFragment: "deleteVestingSchedule",
        values: [
            PromiseOrValue<string>,
            PromiseOrValue<string>,
            PromiseOrValue<BytesLike>
        ]
    ): string
    encodeFunctionData(
        functionFragment: "executeCliffAndFlow",
        values: [
            PromiseOrValue<string>,
            PromiseOrValue<string>,
            PromiseOrValue<string>
        ]
    ): string
    encodeFunctionData(
        functionFragment: "executeEndVesting",
        values: [
            PromiseOrValue<string>,
            PromiseOrValue<string>,
            PromiseOrValue<string>
        ]
    ): string
    encodeFunctionData(
        functionFragment: "getVestingSchedule",
        values: [
            PromiseOrValue<string>,
            PromiseOrValue<string>,
            PromiseOrValue<string>
        ]
    ): string
    encodeFunctionData(
        functionFragment: "updateVestingSchedule",
        values: [
            PromiseOrValue<string>,
            PromiseOrValue<string>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BytesLike>
        ]
    ): string

    decodeFunctionResult(
        functionFragment: "createVestingSchedule",
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: "deleteVestingSchedule",
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: "executeCliffAndFlow",
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: "executeEndVesting",
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: "getVestingSchedule",
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: "updateVestingSchedule",
        data: BytesLike
    ): Result

    events: {
        "VestingCliffAndFlowExecuted(address,address,address,uint32,int96,uint256,uint256)": EventFragment
        "VestingEndExecuted(address,address,address,uint32,uint256,bool)": EventFragment
        "VestingEndFailed(address,address,address,uint32)": EventFragment
        "VestingScheduleCreated(address,address,address,uint32,uint32,int96,uint32,uint256)": EventFragment
        "VestingScheduleDeleted(address,address,address)": EventFragment
        "VestingScheduleUpdated(address,address,address,uint32,uint32)": EventFragment
    }

    getEvent(
        nameOrSignatureOrTopic: "VestingCliffAndFlowExecuted"
    ): EventFragment
    getEvent(nameOrSignatureOrTopic: "VestingEndExecuted"): EventFragment
    getEvent(nameOrSignatureOrTopic: "VestingEndFailed"): EventFragment
    getEvent(nameOrSignatureOrTopic: "VestingScheduleCreated"): EventFragment
    getEvent(nameOrSignatureOrTopic: "VestingScheduleDeleted"): EventFragment
    getEvent(nameOrSignatureOrTopic: "VestingScheduleUpdated"): EventFragment
}

export interface VestingCliffAndFlowExecutedEventObject {
    superToken: string
    sender: string
    receiver: string
    cliffAndFlowDate: number
    flowRate: BigNumber
    cliffAmount: BigNumber
    flowDelayCompensation: BigNumber
}
export type VestingCliffAndFlowExecutedEvent = TypedEvent<
    [string, string, string, number, BigNumber, BigNumber, BigNumber],
    VestingCliffAndFlowExecutedEventObject
>

export type VestingCliffAndFlowExecutedEventFilter =
    TypedEventFilter<VestingCliffAndFlowExecutedEvent>

export interface VestingEndExecutedEventObject {
    superToken: string
    sender: string
    receiver: string
    endDate: number
    earlyEndCompensation: BigNumber
    didCompensationFail: boolean
}
export type VestingEndExecutedEvent = TypedEvent<
    [string, string, string, number, BigNumber, boolean],
    VestingEndExecutedEventObject
>

export type VestingEndExecutedEventFilter =
    TypedEventFilter<VestingEndExecutedEvent>

export interface VestingEndFailedEventObject {
    superToken: string
    sender: string
    receiver: string
    endDate: number
}
export type VestingEndFailedEvent = TypedEvent<
    [string, string, string, number],
    VestingEndFailedEventObject
>

export type VestingEndFailedEventFilter =
    TypedEventFilter<VestingEndFailedEvent>

export interface VestingScheduleCreatedEventObject {
    superToken: string
    sender: string
    receiver: string
    startDate: number
    cliffDate: number
    flowRate: BigNumber
    endDate: number
    cliffAmount: BigNumber
}
export type VestingScheduleCreatedEvent = TypedEvent<
    [string, string, string, number, number, BigNumber, number, BigNumber],
    VestingScheduleCreatedEventObject
>

export type VestingScheduleCreatedEventFilter =
    TypedEventFilter<VestingScheduleCreatedEvent>

export interface VestingScheduleDeletedEventObject {
    superToken: string
    sender: string
    receiver: string
}
export type VestingScheduleDeletedEvent = TypedEvent<
    [string, string, string],
    VestingScheduleDeletedEventObject
>

export type VestingScheduleDeletedEventFilter =
    TypedEventFilter<VestingScheduleDeletedEvent>

export interface VestingScheduleUpdatedEventObject {
    superToken: string
    sender: string
    receiver: string
    oldEndDate: number
    endDate: number
}
export type VestingScheduleUpdatedEvent = TypedEvent<
    [string, string, string, number, number],
    VestingScheduleUpdatedEventObject
>

export type VestingScheduleUpdatedEventFilter =
    TypedEventFilter<VestingScheduleUpdatedEvent>

export interface IVestingScheduler extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: IVestingSchedulerInterface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(
        eventFilter?: TypedEventFilter<TEvent>
    ): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(
        eventFilter: TypedEventFilter<TEvent>
    ): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        createVestingSchedule(
            superToken: PromiseOrValue<string>,
            receiver: PromiseOrValue<string>,
            startDate: PromiseOrValue<BigNumberish>,
            cliffDate: PromiseOrValue<BigNumberish>,
            flowRate: PromiseOrValue<BigNumberish>,
            cliffAmount: PromiseOrValue<BigNumberish>,
            endDate: PromiseOrValue<BigNumberish>,
            ctx: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        deleteVestingSchedule(
            superToken: PromiseOrValue<string>,
            receiver: PromiseOrValue<string>,
            ctx: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        executeCliffAndFlow(
            superToken: PromiseOrValue<string>,
            sender: PromiseOrValue<string>,
            receiver: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        executeEndVesting(
            superToken: PromiseOrValue<string>,
            sender: PromiseOrValue<string>,
            receiver: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        getVestingSchedule(
            superToken: PromiseOrValue<string>,
            sender: PromiseOrValue<string>,
            receiver: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<[IVestingScheduler.VestingScheduleStructOutput]>

        updateVestingSchedule(
            superToken: PromiseOrValue<string>,
            receiver: PromiseOrValue<string>,
            endDate: PromiseOrValue<BigNumberish>,
            ctx: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>
    }

    createVestingSchedule(
        superToken: PromiseOrValue<string>,
        receiver: PromiseOrValue<string>,
        startDate: PromiseOrValue<BigNumberish>,
        cliffDate: PromiseOrValue<BigNumberish>,
        flowRate: PromiseOrValue<BigNumberish>,
        cliffAmount: PromiseOrValue<BigNumberish>,
        endDate: PromiseOrValue<BigNumberish>,
        ctx: PromiseOrValue<BytesLike>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    deleteVestingSchedule(
        superToken: PromiseOrValue<string>,
        receiver: PromiseOrValue<string>,
        ctx: PromiseOrValue<BytesLike>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    executeCliffAndFlow(
        superToken: PromiseOrValue<string>,
        sender: PromiseOrValue<string>,
        receiver: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    executeEndVesting(
        superToken: PromiseOrValue<string>,
        sender: PromiseOrValue<string>,
        receiver: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    getVestingSchedule(
        superToken: PromiseOrValue<string>,
        sender: PromiseOrValue<string>,
        receiver: PromiseOrValue<string>,
        overrides?: CallOverrides
    ): Promise<IVestingScheduler.VestingScheduleStructOutput>

    updateVestingSchedule(
        superToken: PromiseOrValue<string>,
        receiver: PromiseOrValue<string>,
        endDate: PromiseOrValue<BigNumberish>,
        ctx: PromiseOrValue<BytesLike>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    callStatic: {
        createVestingSchedule(
            superToken: PromiseOrValue<string>,
            receiver: PromiseOrValue<string>,
            startDate: PromiseOrValue<BigNumberish>,
            cliffDate: PromiseOrValue<BigNumberish>,
            flowRate: PromiseOrValue<BigNumberish>,
            cliffAmount: PromiseOrValue<BigNumberish>,
            endDate: PromiseOrValue<BigNumberish>,
            ctx: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<string>

        deleteVestingSchedule(
            superToken: PromiseOrValue<string>,
            receiver: PromiseOrValue<string>,
            ctx: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<string>

        executeCliffAndFlow(
            superToken: PromiseOrValue<string>,
            sender: PromiseOrValue<string>,
            receiver: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<boolean>

        executeEndVesting(
            superToken: PromiseOrValue<string>,
            sender: PromiseOrValue<string>,
            receiver: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<boolean>

        getVestingSchedule(
            superToken: PromiseOrValue<string>,
            sender: PromiseOrValue<string>,
            receiver: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<IVestingScheduler.VestingScheduleStructOutput>

        updateVestingSchedule(
            superToken: PromiseOrValue<string>,
            receiver: PromiseOrValue<string>,
            endDate: PromiseOrValue<BigNumberish>,
            ctx: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<string>
    }

    filters: {
        "VestingCliffAndFlowExecuted(address,address,address,uint32,int96,uint256,uint256)"(
            superToken?: PromiseOrValue<string> | null,
            sender?: PromiseOrValue<string> | null,
            receiver?: PromiseOrValue<string> | null,
            cliffAndFlowDate?: null,
            flowRate?: null,
            cliffAmount?: null,
            flowDelayCompensation?: null
        ): VestingCliffAndFlowExecutedEventFilter
        VestingCliffAndFlowExecuted(
            superToken?: PromiseOrValue<string> | null,
            sender?: PromiseOrValue<string> | null,
            receiver?: PromiseOrValue<string> | null,
            cliffAndFlowDate?: null,
            flowRate?: null,
            cliffAmount?: null,
            flowDelayCompensation?: null
        ): VestingCliffAndFlowExecutedEventFilter

        "VestingEndExecuted(address,address,address,uint32,uint256,bool)"(
            superToken?: PromiseOrValue<string> | null,
            sender?: PromiseOrValue<string> | null,
            receiver?: PromiseOrValue<string> | null,
            endDate?: null,
            earlyEndCompensation?: null,
            didCompensationFail?: null
        ): VestingEndExecutedEventFilter
        VestingEndExecuted(
            superToken?: PromiseOrValue<string> | null,
            sender?: PromiseOrValue<string> | null,
            receiver?: PromiseOrValue<string> | null,
            endDate?: null,
            earlyEndCompensation?: null,
            didCompensationFail?: null
        ): VestingEndExecutedEventFilter

        "VestingEndFailed(address,address,address,uint32)"(
            superToken?: PromiseOrValue<string> | null,
            sender?: PromiseOrValue<string> | null,
            receiver?: PromiseOrValue<string> | null,
            endDate?: null
        ): VestingEndFailedEventFilter
        VestingEndFailed(
            superToken?: PromiseOrValue<string> | null,
            sender?: PromiseOrValue<string> | null,
            receiver?: PromiseOrValue<string> | null,
            endDate?: null
        ): VestingEndFailedEventFilter

        "VestingScheduleCreated(address,address,address,uint32,uint32,int96,uint32,uint256)"(
            superToken?: PromiseOrValue<string> | null,
            sender?: PromiseOrValue<string> | null,
            receiver?: PromiseOrValue<string> | null,
            startDate?: null,
            cliffDate?: null,
            flowRate?: null,
            endDate?: null,
            cliffAmount?: null
        ): VestingScheduleCreatedEventFilter
        VestingScheduleCreated(
            superToken?: PromiseOrValue<string> | null,
            sender?: PromiseOrValue<string> | null,
            receiver?: PromiseOrValue<string> | null,
            startDate?: null,
            cliffDate?: null,
            flowRate?: null,
            endDate?: null,
            cliffAmount?: null
        ): VestingScheduleCreatedEventFilter

        "VestingScheduleDeleted(address,address,address)"(
            superToken?: PromiseOrValue<string> | null,
            sender?: PromiseOrValue<string> | null,
            receiver?: PromiseOrValue<string> | null
        ): VestingScheduleDeletedEventFilter
        VestingScheduleDeleted(
            superToken?: PromiseOrValue<string> | null,
            sender?: PromiseOrValue<string> | null,
            receiver?: PromiseOrValue<string> | null
        ): VestingScheduleDeletedEventFilter

        "VestingScheduleUpdated(address,address,address,uint32,uint32)"(
            superToken?: PromiseOrValue<string> | null,
            sender?: PromiseOrValue<string> | null,
            receiver?: PromiseOrValue<string> | null,
            oldEndDate?: null,
            endDate?: null
        ): VestingScheduleUpdatedEventFilter
        VestingScheduleUpdated(
            superToken?: PromiseOrValue<string> | null,
            sender?: PromiseOrValue<string> | null,
            receiver?: PromiseOrValue<string> | null,
            oldEndDate?: null,
            endDate?: null
        ): VestingScheduleUpdatedEventFilter
    }

    estimateGas: {
        createVestingSchedule(
            superToken: PromiseOrValue<string>,
            receiver: PromiseOrValue<string>,
            startDate: PromiseOrValue<BigNumberish>,
            cliffDate: PromiseOrValue<BigNumberish>,
            flowRate: PromiseOrValue<BigNumberish>,
            cliffAmount: PromiseOrValue<BigNumberish>,
            endDate: PromiseOrValue<BigNumberish>,
            ctx: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        deleteVestingSchedule(
            superToken: PromiseOrValue<string>,
            receiver: PromiseOrValue<string>,
            ctx: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        executeCliffAndFlow(
            superToken: PromiseOrValue<string>,
            sender: PromiseOrValue<string>,
            receiver: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        executeEndVesting(
            superToken: PromiseOrValue<string>,
            sender: PromiseOrValue<string>,
            receiver: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        getVestingSchedule(
            superToken: PromiseOrValue<string>,
            sender: PromiseOrValue<string>,
            receiver: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        updateVestingSchedule(
            superToken: PromiseOrValue<string>,
            receiver: PromiseOrValue<string>,
            endDate: PromiseOrValue<BigNumberish>,
            ctx: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>
    }

    populateTransaction: {
        createVestingSchedule(
            superToken: PromiseOrValue<string>,
            receiver: PromiseOrValue<string>,
            startDate: PromiseOrValue<BigNumberish>,
            cliffDate: PromiseOrValue<BigNumberish>,
            flowRate: PromiseOrValue<BigNumberish>,
            cliffAmount: PromiseOrValue<BigNumberish>,
            endDate: PromiseOrValue<BigNumberish>,
            ctx: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        deleteVestingSchedule(
            superToken: PromiseOrValue<string>,
            receiver: PromiseOrValue<string>,
            ctx: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        executeCliffAndFlow(
            superToken: PromiseOrValue<string>,
            sender: PromiseOrValue<string>,
            receiver: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        executeEndVesting(
            superToken: PromiseOrValue<string>,
            sender: PromiseOrValue<string>,
            receiver: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        getVestingSchedule(
            superToken: PromiseOrValue<string>,
            sender: PromiseOrValue<string>,
            receiver: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        updateVestingSchedule(
            superToken: PromiseOrValue<string>,
            receiver: PromiseOrValue<string>,
            endDate: PromiseOrValue<BigNumberish>,
            ctx: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>
    }
}
