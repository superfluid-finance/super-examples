/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers"
import type { Provider } from "@ethersproject/providers"
import type {
    ITaskTreasuryUpgradable,
    ITaskTreasuryUpgradableInterface
} from "../../../../src/gelato/Types.sol/ITaskTreasuryUpgradable"

const _abi = [
    {
        inputs: [
            {
                internalType: "address",
                name: "receiver",
                type: "address"
            },
            {
                internalType: "address",
                name: "token",
                type: "address"
            },
            {
                internalType: "uint256",
                name: "amount",
                type: "uint256"
            }
        ],
        name: "depositFunds",
        outputs: [],
        stateMutability: "payable",
        type: "function"
    },
    {
        inputs: [
            {
                internalType: "address payable",
                name: "receiver",
                type: "address"
            },
            {
                internalType: "address",
                name: "token",
                type: "address"
            },
            {
                internalType: "uint256",
                name: "amount",
                type: "uint256"
            }
        ],
        name: "withdrawFunds",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
    }
] as const

export class ITaskTreasuryUpgradable__factory {
    static readonly abi = _abi
    static createInterface(): ITaskTreasuryUpgradableInterface {
        return new utils.Interface(_abi) as ITaskTreasuryUpgradableInterface
    }
    static connect(
        address: string,
        signerOrProvider: Signer | Provider
    ): ITaskTreasuryUpgradable {
        return new Contract(
            address,
            _abi,
            signerOrProvider
        ) as ITaskTreasuryUpgradable
    }
}
