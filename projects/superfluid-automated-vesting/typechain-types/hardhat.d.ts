/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers"
import {
    FactoryOptions,
    HardhatEthersHelpers as HardhatEthersHelpersBase
} from "@nomiclabs/hardhat-ethers/types"

import * as Contracts from "."

declare module "hardhat/types/runtime" {
    interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
        getContractFactory(
            name: "IERC20Permit",
            signerOrOptions?: ethers.Signer | FactoryOptions
        ): Promise<Contracts.IERC20Permit__factory>
        getContractFactory(
            name: "IERC20",
            signerOrOptions?: ethers.Signer | FactoryOptions
        ): Promise<Contracts.IERC20__factory>
        getContractFactory(
            name: "IERC777",
            signerOrOptions?: ethers.Signer | FactoryOptions
        ): Promise<Contracts.IERC777__factory>
        getContractFactory(
            name: "SuperAppBase",
            signerOrOptions?: ethers.Signer | FactoryOptions
        ): Promise<Contracts.SuperAppBase__factory>
        getContractFactory(
            name: "IConstantFlowAgreementV1",
            signerOrOptions?: ethers.Signer | FactoryOptions
        ): Promise<Contracts.IConstantFlowAgreementV1__factory>
        getContractFactory(
            name: "ISuperAgreement",
            signerOrOptions?: ethers.Signer | FactoryOptions
        ): Promise<Contracts.ISuperAgreement__factory>
        getContractFactory(
            name: "ISuperApp",
            signerOrOptions?: ethers.Signer | FactoryOptions
        ): Promise<Contracts.ISuperApp__factory>
        getContractFactory(
            name: "ISuperfluid",
            signerOrOptions?: ethers.Signer | FactoryOptions
        ): Promise<Contracts.ISuperfluid__factory>
        getContractFactory(
            name: "ISuperfluidGovernance",
            signerOrOptions?: ethers.Signer | FactoryOptions
        ): Promise<Contracts.ISuperfluidGovernance__factory>
        getContractFactory(
            name: "ISuperfluidToken",
            signerOrOptions?: ethers.Signer | FactoryOptions
        ): Promise<Contracts.ISuperfluidToken__factory>
        getContractFactory(
            name: "ISuperToken",
            signerOrOptions?: ethers.Signer | FactoryOptions
        ): Promise<Contracts.ISuperToken__factory>
        getContractFactory(
            name: "ISuperTokenFactory",
            signerOrOptions?: ethers.Signer | FactoryOptions
        ): Promise<Contracts.ISuperTokenFactory__factory>
        getContractFactory(
            name: "ERC20WithTokenInfo",
            signerOrOptions?: ethers.Signer | FactoryOptions
        ): Promise<Contracts.ERC20WithTokenInfo__factory>
        getContractFactory(
            name: "TokenInfo",
            signerOrOptions?: ethers.Signer | FactoryOptions
        ): Promise<Contracts.TokenInfo__factory>
        getContractFactory(
            name: "AutomateReady",
            signerOrOptions?: ethers.Signer | FactoryOptions
        ): Promise<Contracts.AutomateReady__factory>
        getContractFactory(
            name: "AutomateTaskCreator",
            signerOrOptions?: ethers.Signer | FactoryOptions
        ): Promise<Contracts.AutomateTaskCreator__factory>
        getContractFactory(
            name: "IAutomate",
            signerOrOptions?: ethers.Signer | FactoryOptions
        ): Promise<Contracts.IAutomate__factory>
        getContractFactory(
            name: "IOpsProxyFactory",
            signerOrOptions?: ethers.Signer | FactoryOptions
        ): Promise<Contracts.IOpsProxyFactory__factory>
        getContractFactory(
            name: "ITaskTreasuryUpgradable",
            signerOrOptions?: ethers.Signer | FactoryOptions
        ): Promise<Contracts.ITaskTreasuryUpgradable__factory>
        getContractFactory(
            name: "IVestingScheduler",
            signerOrOptions?: ethers.Signer | FactoryOptions
        ): Promise<Contracts.IVestingScheduler__factory>
        getContractFactory(
            name: "VestingAutomation",
            signerOrOptions?: ethers.Signer | FactoryOptions
        ): Promise<Contracts.VestingAutomation__factory>
        getContractFactory(
            name: "VestingScheduler",
            signerOrOptions?: ethers.Signer | FactoryOptions
        ): Promise<Contracts.VestingScheduler__factory>

        getContractAt(
            name: "IERC20Permit",
            address: string,
            signer?: ethers.Signer
        ): Promise<Contracts.IERC20Permit>
        getContractAt(
            name: "IERC20",
            address: string,
            signer?: ethers.Signer
        ): Promise<Contracts.IERC20>
        getContractAt(
            name: "IERC777",
            address: string,
            signer?: ethers.Signer
        ): Promise<Contracts.IERC777>
        getContractAt(
            name: "SuperAppBase",
            address: string,
            signer?: ethers.Signer
        ): Promise<Contracts.SuperAppBase>
        getContractAt(
            name: "IConstantFlowAgreementV1",
            address: string,
            signer?: ethers.Signer
        ): Promise<Contracts.IConstantFlowAgreementV1>
        getContractAt(
            name: "ISuperAgreement",
            address: string,
            signer?: ethers.Signer
        ): Promise<Contracts.ISuperAgreement>
        getContractAt(
            name: "ISuperApp",
            address: string,
            signer?: ethers.Signer
        ): Promise<Contracts.ISuperApp>
        getContractAt(
            name: "ISuperfluid",
            address: string,
            signer?: ethers.Signer
        ): Promise<Contracts.ISuperfluid>
        getContractAt(
            name: "ISuperfluidGovernance",
            address: string,
            signer?: ethers.Signer
        ): Promise<Contracts.ISuperfluidGovernance>
        getContractAt(
            name: "ISuperfluidToken",
            address: string,
            signer?: ethers.Signer
        ): Promise<Contracts.ISuperfluidToken>
        getContractAt(
            name: "ISuperToken",
            address: string,
            signer?: ethers.Signer
        ): Promise<Contracts.ISuperToken>
        getContractAt(
            name: "ISuperTokenFactory",
            address: string,
            signer?: ethers.Signer
        ): Promise<Contracts.ISuperTokenFactory>
        getContractAt(
            name: "ERC20WithTokenInfo",
            address: string,
            signer?: ethers.Signer
        ): Promise<Contracts.ERC20WithTokenInfo>
        getContractAt(
            name: "TokenInfo",
            address: string,
            signer?: ethers.Signer
        ): Promise<Contracts.TokenInfo>
        getContractAt(
            name: "AutomateReady",
            address: string,
            signer?: ethers.Signer
        ): Promise<Contracts.AutomateReady>
        getContractAt(
            name: "AutomateTaskCreator",
            address: string,
            signer?: ethers.Signer
        ): Promise<Contracts.AutomateTaskCreator>
        getContractAt(
            name: "IAutomate",
            address: string,
            signer?: ethers.Signer
        ): Promise<Contracts.IAutomate>
        getContractAt(
            name: "IOpsProxyFactory",
            address: string,
            signer?: ethers.Signer
        ): Promise<Contracts.IOpsProxyFactory>
        getContractAt(
            name: "ITaskTreasuryUpgradable",
            address: string,
            signer?: ethers.Signer
        ): Promise<Contracts.ITaskTreasuryUpgradable>
        getContractAt(
            name: "IVestingScheduler",
            address: string,
            signer?: ethers.Signer
        ): Promise<Contracts.IVestingScheduler>
        getContractAt(
            name: "VestingAutomation",
            address: string,
            signer?: ethers.Signer
        ): Promise<Contracts.VestingAutomation>
        getContractAt(
            name: "VestingScheduler",
            address: string,
            signer?: ethers.Signer
        ): Promise<Contracts.VestingScheduler>

        // default types
        getContractFactory(
            name: string,
            signerOrOptions?: ethers.Signer | FactoryOptions
        ): Promise<ethers.ContractFactory>
        getContractFactory(
            abi: any[],
            bytecode: ethers.utils.BytesLike,
            signer?: ethers.Signer
        ): Promise<ethers.ContractFactory>
        getContractAt(
            nameOrAbi: string | any[],
            address: string,
            signer?: ethers.Signer
        ): Promise<ethers.Contract>
    }
}
